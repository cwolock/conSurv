% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/survMLc.R
\name{survMLc}
\alias{survMLc}
\title{Estimate a conditional survival function using cumulative probability estimator}
\usage{
survMLc(
  time,
  event = rep(1, length(time)),
  entry = NULL,
  X,
  newX,
  newtimes,
  direction = "prospective",
  bin_size = NULL,
  time_basis,
  time_grid_approx = sort(unique(time)),
  denom_method = "stratified",
  surv_form = "PI",
  SL.library,
  V = 10,
  tau = NULL
)
}
\arguments{
\item{time}{\code{n x 1} numeric vector of observed
follow-up times If there is censoring, these are the minimum of the
event and censoring times.}

\item{event}{\code{n x 1} numeric vector of status indicators of
whether an event was observed. Defaults to a vector of 1s, i.e. no censoring.}

\item{entry}{Study entry variable, if applicable. Defaults to \code{NULL},
indicating that there is no truncation.}

\item{X}{\code{n x p} data.frame of observed covariate values
on which to train the estimator.}

\item{newX}{\code{m x p} data.frame of new observed covariate
values at which to obtain \code{m} predictions for the estimated algorithm.
Must have the same names and structure as \code{X}.}

\item{newtimes}{\code{k x 1} numeric vector of times at which to obtain \code{k}
predicted conditional survivals.}

\item{direction}{Whether the data come from a prospective or retrospective study.
This determines whether the data are treated as subject to left truncation and
right censoring (\code{"prospective"}) or right truncation alone
(\code{"retrospective"}).}

\item{bin_size}{Size of time bin on which to discretize for estimation
of cumulative probability functions. Can be a number between 0 and 1,
indicating the size of quantile grid (e.g. \code{0.1} estimates
the cumulative probability functions on a grid based on deciles of
observed \code{time}s). If \code{NULL}, creates a grid of
all observed \code{time}s.}

\item{time_basis}{How to treat time for training the binary
classifier. Options are \code{"continuous"} and \code{"dummy"}, meaning
an indicator variable is included for each time in the time grid.}

\item{time_grid_approx}{Numeric vector of times at which to
approximate product integral or cumulative hazard interval.
Defaults to \code{times} argument.}

\item{denom_method}{Denominator form for the hazard identification. Can
be either \code{"stratified"} (estimate the at-risk probability
within strata of the \code{event} variable) or \code{"marginal"} (estimate
the at-risk probability using all observations).}

\item{surv_form}{Mapping from hazard estimate to survival estimate.
Can be either \code{"PI"} (product integral mapping) or \code{"exp"}
(exponentiated cumulative hazard estimate).}

\item{SL.library}{Library of algorithms to include in the binary classification
Super Learner. Should have the same structure as the \code{SL.library}
argument to the \code{SuperLearner} function in the \code{SuperLearner} package.}

\item{V}{Number of cross validation folds on which to train the Super Learner
classifier. Defaults to 10.}

\item{tau}{The maximum time of interest in a study, used for
retrospective conditional survival estimation. Rather than dealing
with right truncation separately than left truncation, it is simpler to
estimate the survival function of \code{tau - time}. Defaults to code{NULL},
in which case the maximum study entry time is chosen as the
reference point.}
}
\value{
A named list of class \code{survMLc}
}
\description{
Estimate a conditional survival function using cumulative probability estimator
}
\examples{

# This is a small simulation example
set.seed(92)
n <- 100
X <- data.frame(X1 = rnorm(n), X2 = rbinom(n, size = 1, prob = 0.5))

S0 <- function(t, x){
  pexp(t, rate = exp(-2 + x[,1] - x[,2] + .5 * x[,1] * x[,2]), lower.tail = FALSE)
}
T <- rexp(n, rate = exp(-2 + X[,1] - X[,2] + .5 *  X[,1] * X[,2]))

G0 <- function(t, x) {
  as.numeric(t < 15) *.9*pexp(t,
                              rate = exp(-2 -.5*x[,1]-.25*x[,2]+.5*x[,1]*x[,2]),
                              lower.tail=FALSE)
}
C <- rexp(n, exp(-2 -.5 * X[,1] - .25 * X[,2] + .5 * X[,1] * X[,2]))
C[C > 15] <- 15

entry <- runif(n, 0, 15)

time <- pmin(T, C)
event <- as.numeric(T <= C)

sampled <- which(time >= entry)
X <- X[sampled,]
time <- time[sampled]
event <- event[sampled]
entry <- entry[sampled]

SL.library <- c("SL.mean", "SL.glm", "SL.gam", "SL.earth")

fit <- survMLc(time = time,
               event = event,
               entry = entry,
               X = X,
               newX = X,
               newtimes = seq(0, 15, .1),
               direction = "prospective",
               bin_size = 0.02,
               time_basis = "continuous",
               time_grid_approx = sort(unique(time)),
               denom_method = "stratified",
               surv_form = "exp",
               SL.library = SL.library,
               V = 5)

plot(fit$S_T_preds[1,], S0(t =  seq(0, 15, .1), X[1,]))
abline(0,1,col='red')
}
