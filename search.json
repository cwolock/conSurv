[{"path":"https://cwolock.github.io/survML/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU GENERAL PUBLIC LICENSE","title":"GNU GENERAL PUBLIC LICENSE","text":"Version 3, 29 June 2007 Copyright (C) 2007 Free Software Foundation, Inc. Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://cwolock.github.io/survML/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU GENERAL PUBLIC LICENSE","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: assert copyright software, offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://cwolock.github.io/survML/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions.","title":"GNU GENERAL PUBLIC LICENSE","text":"License refers version 3 GNU General Public License. Copyright also means copyright-like laws apply kinds works, semiconductor masks. Program refers copyrightable work licensed License. licensee addressed . Licensees recipients may individuals organizations. modify work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called modified version earlier work work based earlier work. covered work means either unmodified Program work based Program. propagate work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. convey work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays Appropriate Legal Notices extent includes convenient prominently visible feature displays appropriate copyright notice, tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://cwolock.github.io/survML/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code.","title":"GNU GENERAL PUBLIC LICENSE","text":"source code work means preferred form work making modifications . Object code means non-source form work. Standard Interface means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. System Libraries executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. Major Component, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . Corresponding Source work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://cwolock.github.io/survML/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions.","title":"GNU GENERAL PUBLIC LICENSE","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://cwolock.github.io/survML/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law.","title":"GNU GENERAL PUBLIC LICENSE","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://cwolock.github.io/survML/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies.","title":"GNU GENERAL PUBLIC LICENSE","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://cwolock.github.io/survML/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions.","title":"GNU GENERAL PUBLIC LICENSE","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: work must carry prominent notices stating modified , giving relevant date. work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 keep intact notices. must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called aggregate compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://cwolock.github.io/survML/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms.","title":"GNU GENERAL PUBLIC LICENSE","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, access copy Corresponding Source network server charge. Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. User Product either consumer product, means tangible personal property normally used personal, family, household purposes, anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, normally used refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. Installation Information User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://cwolock.github.io/survML/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms.","title":"GNU GENERAL PUBLIC LICENSE","text":"Additional permissions terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: Disclaiming warranty limiting liability differently terms sections 15 16 License; Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; Limiting use publicity purposes names licensors authors material; Declining grant rights trademark law use trade names, trademarks, service marks; Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered restrictions within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://cwolock.github.io/survML/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination.","title":"GNU GENERAL PUBLIC LICENSE","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated provisionally, unless copyright holder explicitly finally terminates license, permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://cwolock.github.io/survML/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies.","title":"GNU GENERAL PUBLIC LICENSE","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://cwolock.github.io/survML/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients.","title":"GNU GENERAL PUBLIC LICENSE","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. entity transaction transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://cwolock.github.io/survML/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents.","title":"GNU GENERAL PUBLIC LICENSE","text":"contributor copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s contributor version. contributor’s essential patent claims patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, control includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, patent license express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). grant patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either cause Corresponding Source available, arrange deprive benefit patent license particular work, arrange, manner consistent requirements License, extend patent license downstream recipients. Knowingly relying means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license discriminatory include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license connection copies covered work conveyed (copies made copies), primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://cwolock.github.io/survML/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom.","title":"GNU GENERAL PUBLIC LICENSE","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://cwolock.github.io/survML/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License.","title":"GNU GENERAL PUBLIC LICENSE","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://cwolock.github.io/survML/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License.","title":"GNU GENERAL PUBLIC LICENSE","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License later version applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://cwolock.github.io/survML/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty.","title":"GNU GENERAL PUBLIC LICENSE","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://cwolock.github.io/survML/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability.","title":"GNU GENERAL PUBLIC LICENSE","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://cwolock.github.io/survML/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16.","title":"GNU GENERAL PUBLIC LICENSE","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee.","code":""},{"path":[]},{"path":"https://cwolock.github.io/survML/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"END OF TERMS AND CONDITIONS","what":"How to Apply These Terms to Your New Programs","title":"GNU GENERAL PUBLIC LICENSE","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least copyright line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use box. also get employer (work programmer) school, , sign copyright disclaimer program, necessary. information , apply follow GNU GPL, see http://www.gnu.org/licenses/. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read http://www.gnu.org/philosophy/--lgpl.html.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'. This is free software, and you are welcome to redistribute it under certain conditions; type `show c' for details."},{"path":"https://cwolock.github.io/survML/articles/conditional_survival.html","id":"estimating-a-conditional-survival-function-using-off-the-shelf-machine-learning-tools","dir":"Articles","previous_headings":"","what":"Estimating a conditional survival function using off-the-shelf machine learning tools","title":"Conditional survival estimation","text":"survML package implements two methods estimating conditional survival function using --shelf machine learning. first, called global survival stacking performed using stackG() function, involves decomposing conditional cumulative hazard function regression functions depending observed data. second, called local survival stacking discrete-time hazard estimation, involves discretizing time estimating probability event interest within discrete time period. procedure implemented stackL() function. functions can used left-truncated, right-censored data (commonly seen prospective studies) right-truncated data (commonly seen retrospective studies). details method, well examples, follow.","code":""},{"path":"https://cwolock.github.io/survML/articles/conditional_survival.html","id":"global-survival-stacking","dir":"Articles","previous_headings":"Estimating a conditional survival function using off-the-shelf machine learning tools","what":"Global survival stacking","title":"Conditional survival estimation","text":"basic survival analysis setting right-censored data (simplicity, don’t discuss truncation ), ideal data individual consist covariate vector \\(X\\), event time \\(T\\), censoring time \\(C\\). observed data consist \\(X\\), observed follow-time \\(Y:=\\text{min}(T,C)\\), event indicator \\(\\Delta := (T \\leq C)\\). Global survival stacking requires three components: (1) conditional probability \\(\\Delta = 1\\) given \\(X\\), (2) CDF \\(Y\\) given \\(X\\) among among censored subjects, (3) CDF \\(Y\\) given \\(X\\) among uncensored subjects. three can estimated using standard binary regression classification methods. Estimating (1) standard binary regression problem. use pooled binary regression estimate (2) (3). essence, time \\(t\\) user-specified grid, CDF binary regression using outcome \\((Y \\leq t)\\). data sets \\(t\\) combined single, pooled data set, including \\(t\\) covariate. Currently, survML allows Super Learner used binary regression, learners added future versions. stackG function performs global survival stacking. important user-specified arguments described : bin_size: size time grid used estimating (2) (3). cases, finer grid performs better coarser grid, increased computational cost. recommend using fine grid computational resources time allow. simulations, grid 40 time points performed similarly grid every observed follow-time. Bin size given quantile terms; bin_size = 0.025 use times corresponding quantiles \\(\\{0, 0.025, 0.05, \\dots, 0.975, 1\\}\\). NULL, grid every observed time used. time_basis: time variable \\(t\\) included pooled data set. default continuous (.e., include time -). also possible include dummy variable time grid (.e., treat time factor variable) using option dummy. learner: Currently, supported option SuperLearner. SL_control: named list arguments passed directly SuperLearner() function. SL.library gives library algorithms included Super Learner binary regression. argument vector algorithm names, can either default algorithms included SuperLearner package, user-specified algorithms. See SuperLearner package documentation information.","code":""},{"path":"https://cwolock.github.io/survML/articles/conditional_survival.html","id":"example","dir":"Articles","previous_headings":"Estimating a conditional survival function using off-the-shelf machine learning tools > Global survival stacking","what":"Example","title":"Conditional survival estimation","text":"’s small example applying stackG simulated data. can plot fitted versus true conditional survival various times one particular individual data set:  stackG function simultaneously produces estimates conditional censoring distribution. may useful, example, producing inverse probability censoring (IPCW) weights.","code":"# This is a small simulation example set.seed(123) n <- 500 X <- data.frame(X1 = rnorm(n), X2 = rbinom(n, size = 1, prob = 0.5))  S0 <- function(t, x){   pexp(t, rate = exp(-2 + x[,1] - x[,2] + .5 * x[,1] * x[,2]), lower.tail = FALSE) } T <- rexp(n, rate = exp(-2 + X[,1] - X[,2] + .5 *  X[,1] * X[,2]))  G0 <- function(t, x) {   as.numeric(t < 15) *.9*pexp(t,                               rate = exp(-2 -.5*x[,1]-.25*x[,2]+.5*x[,1]*x[,2]),                               lower.tail=FALSE) } C <- rexp(n, exp(-2 -.5 * X[,1] - .25 * X[,2] + .5 * X[,1] * X[,2])) C[C > 15] <- 15  time <- pmin(T, C) event <- as.numeric(T <= C)  # note that this a very small library, just for demonstration SL.library <- c(\"SL.mean\", \"SL.glm\", \"SL.gam\")  fit <- stackG(time = time,               event = event,               X = X,               newX = X,               newtimes = seq(0, 15, .1),               direction = \"prospective\",               bin_size = 0.1,               time_basis = \"continuous\",               time_grid_approx = sort(unique(time)),               surv_form = \"exp\",               SL_control = list(SL.library = SL.library,                                 V = 5)) plot_dat <- data.frame(fitted = fit$S_T_preds[1,],                         true = S0(t =  seq(0, 15, .1), X[1,]))  p <- ggplot(data = plot_dat, mapping = aes(x = true, y = fitted)) +    geom_point() +    geom_abline(slope = 1, intercept = 0, color = \"red\") +    theme_bw() +    ylab(\"fitted\") +   xlab(\"true\") +    ggtitle(\"Global survival stacking example (event time distribution)\")  p plot_dat <- data.frame(fitted = fit$S_C_preds[1,],                         true = G0(t =  seq(0, 15, .1), X[1,]))  p <- ggplot(data = plot_dat, mapping = aes(x = true, y = fitted)) +    geom_point() +    geom_abline(slope = 1, intercept = 0, color = \"red\") +    theme_bw() +    ylab(\"fitted\") +   xlab(\"true\") +    ggtitle(\"Global survival stacking example (censoring time distribution)\")  p"},{"path":"https://cwolock.github.io/survML/articles/conditional_survival.html","id":"local-survival-stacking","dir":"Articles","previous_headings":"Estimating a conditional survival function using off-the-shelf machine learning tools","what":"Local survival stacking","title":"Conditional survival estimation","text":"discrete time--event variables, hazard function single time conditional probability whose estimation can framed binary regression problem: among experienced event time \\(t\\), proportion experience outcome time? Local survival stacking assumes discrete survival process based estimating conditional event probability time user-specified grid. binary regressions estimated jointly “stacking” data sets corresponding times grid. idea dates back least work Polley van der Laan (2011) also recently described Craig et al. (2021).","code":""},{"path":"https://cwolock.github.io/survML/articles/conditional_survival.html","id":"example-1","dir":"Articles","previous_headings":"Estimating a conditional survival function using off-the-shelf machine learning tools > Local survival stacking","what":"Example","title":"Conditional survival estimation","text":"","code":"fit <- stackL(time = time,               event = event,               X = X,               newX = X,               newtimes = seq(0, 15, .1),               direction = \"prospective\",               bin_size = 0.1,               time_basis = \"continuous\",               SL_control = list(SL.library = SL.library,                                 V = 5)) plot_dat <- data.frame(fitted = fit$S_T_preds[1,],                         true = S0(t =  seq(0, 15, .1), X[1,]))  p <- ggplot(data = plot_dat, mapping = aes(x = true, y = fitted)) +    geom_point() +    geom_abline(slope = 1, intercept = 0, color = \"red\") +    theme_bw() +    ylab(\"fitted\") +   xlab(\"true\") +    ggtitle(\"Local survival stacking example\")  p"},{"path":"https://cwolock.github.io/survML/articles/conditional_survival.html","id":"references","dir":"Articles","previous_headings":"Estimating a conditional survival function using off-the-shelf machine learning tools","what":"References","title":"Conditional survival estimation","text":"details global survival stacking, please see following paper: Charles J. Wolock, Peter B. Gilbert, Noah Simon Marco Carone. “framework leveraging machine learning tools estimate personalized survival curves.” Journal Computational Graphical Statistics (2024). Local survival stacking described : Eric C. Polley Mark J. van der Laan. “Super Learning Right-Censored Data” Targeted Learning (2011). Erin Craig, Chenyang Zhong, Robert Tibshirani. “Survival stacking: casting survival analysis classification problem.” arXiv:2107.13480.","code":""},{"path":"https://cwolock.github.io/survML/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Charles Wolock. Author, maintainer, copyright holder. Avi Kenny. Contributor.","code":""},{"path":"https://cwolock.github.io/survML/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Wolock C (2024). survML: Tools Flexible Survival Analysis Using Machine Learning. R package version 1.1.0.9000, https://cwolock.github.io/survML/, https://github.com/cwolock/survML.","code":"@Manual{,   title = {survML: Tools for Flexible Survival Analysis Using Machine Learning},   author = {Charles Wolock},   year = {2024},   note = {R package version 1.1.0.9000, https://cwolock.github.io/survML/},   url = {https://github.com/cwolock/survML}, }"},{"path":"https://cwolock.github.io/survML/index.html","id":"survml-tools-for-flexible-survival-analysis-using-machine-learning","dir":"","previous_headings":"","what":"Tools for Flexible Survival Analysis Using Machine Learning","title":"Tools for Flexible Survival Analysis Using Machine Learning","text":"Note: current development version survML now functionality estimating variable importance, addition original survival stacking functionality included versions 1.1.0 earlier. Documentation new functionality, well new version CRAN, forthcoming. survML package implements two methods estimating conditional survival function using --shelf machine learning. first, called global survival stacking performed using stackG() function, involves decomposing conditional cumulative hazard function regression functions depending observed data. second, called local survival stacking discrete-time hazard estimation, involves discretizing time estimating probability event interest within discrete time period. procedure implemented stackL() function. functions can used left-truncated, right-censored data (commonly seen prospective studies) right-truncated data (commonly seen retrospective studies). details method, well examples, follow.","code":""},{"path":"https://cwolock.github.io/survML/index.html","id":"installing-survml","dir":"","previous_headings":"","what":"Installing survML","title":"Tools for Flexible Survival Analysis Using Machine Learning","text":"can install stable version survML CRAN using Alternatively, development version survML available GitHub. can install using devtools package follows:","code":"install.packages(\"survML\") ## install.packages(\"devtools\") # run only if necessary install_github(repo = \"cwolock/survML\")"},{"path":"https://cwolock.github.io/survML/index.html","id":"bugs-reports-and-feature-requests","dir":"","previous_headings":"","what":"Bugs reports and feature requests","title":"Tools for Flexible Survival Analysis Using Machine Learning","text":"submit bug report request new feature, please submit new GitHub Issue.","code":""},{"path":"https://cwolock.github.io/survML/index.html","id":"global-survival-stacking","dir":"","previous_headings":"","what":"Global survival stacking","title":"Tools for Flexible Survival Analysis Using Machine Learning","text":"basic survival analysis setting right-censored data (simplicity, don’t discuss truncation ), ideal data individual consist covariate vector X, event time T, censoring time C. observed data consist X, observed follow-time Y := min(T,C), event indicator Δ := (T≤C). Global survival stacking requires three components: (1) conditional probability Δ = 1 given X, (2) CDF Y given X among among censored subjects, (3) CDF Y given X among uncensored subjects. three can estimated using standard binary regression classification methods. Estimating (1) standard binary regression problem. use pooled binary regression estimate (2) (3). essence, time t user-specified grid, CDF binary regression using outcome (Y≤t). data sets t combined single, pooled data set, including t covariate. Currently, survML allows Super Learner used binary regression, learners added future versions. stackG function performs global survival stacking. important user-specified arguments described : bin_size: size time grid used estimating (2) (3). cases, finer grid performs better coarser grid, increased computational cost. recommend using fine grid computational resources time allow. simulations, grid 40 time points performed similarly grid every observed follow-time. Bin size given quantile terms; bin_size = 0.025 use times corresponding quantiles {0, 0.025, 0.05, …, 0.975, 1}. NULL, grid every observed time used. time_basis: time variable t included pooled data set. default continuous (.e., include time -). also possible include dummy variable time grid (.e., treat time factor variable) using option dummy. learner: Currently, supported option SuperLearner. SL_control: named list arguments passed directly SuperLearner() function. SL.library gives library algorithms included Super Learner binary regression. argument vector algorithm names, can either default algorithms included SuperLearner package, user-specified algorithms. See SuperLearner package documentation information.","code":""},{"path":"https://cwolock.github.io/survML/index.html","id":"example","dir":"","previous_headings":"Global survival stacking","what":"Example","title":"Tools for Flexible Survival Analysis Using Machine Learning","text":"’s small example applying stackG simulated data. can plot fitted versus true conditional survival various times one particular individual data set:  stackG function simultaneously produces estimates conditional censoring distribution. may useful, example, producing inverse probability censoring (IPCW) weights.","code":"# This is a small simulation example set.seed(123) n <- 500 X <- data.frame(X1 = rnorm(n), X2 = rbinom(n, size = 1, prob = 0.5))  S0 <- function(t, x){   pexp(t, rate = exp(-2 + x[,1] - x[,2] + .5 * x[,1] * x[,2]), lower.tail = FALSE) } T <- rexp(n, rate = exp(-2 + X[,1] - X[,2] + .5 *  X[,1] * X[,2]))  G0 <- function(t, x) {   as.numeric(t < 15) *.9*pexp(t,                               rate = exp(-2 -.5*x[,1]-.25*x[,2]+.5*x[,1]*x[,2]),                               lower.tail=FALSE) } C <- rexp(n, exp(-2 -.5 * X[,1] - .25 * X[,2] + .5 * X[,1] * X[,2])) C[C > 15] <- 15  time <- pmin(T, C) event <- as.numeric(T <= C)  # note that this a very small library, just for demonstration SL.library <- c(\"SL.mean\", \"SL.glm\", \"SL.gam\")  fit <- stackG(time = time,               event = event,               X = X,               newX = X,               newtimes = seq(0, 15, .1),               direction = \"prospective\",               bin_size = 0.02,               time_basis = \"continuous\",               time_grid_approx = sort(unique(time)),               surv_form = \"exp\",               SL_control = list(SL.library = SL.library,                                 V = 5)) plot_dat <- data.frame(fitted = fit$S_T_preds[1,],                         true = S0(t =  seq(0, 15, .1), X[1,]))  p <- ggplot(data = plot_dat, mapping = aes(x = true, y = fitted)) +    geom_point() +    geom_abline(slope = 1, intercept = 0, color = \"red\") +    theme_bw() +    ylab(\"fitted\") +   xlab(\"true\") +    ggtitle(\"Global survival stacking example (event time distribution)\")  p plot_dat <- data.frame(fitted = fit$S_C_preds[1,],                         true = G0(t =  seq(0, 15, .1), X[1,]))  p <- ggplot(data = plot_dat, mapping = aes(x = true, y = fitted)) +    geom_point() +    geom_abline(slope = 1, intercept = 0, color = \"red\") +    theme_bw() +    ylab(\"fitted\") +   xlab(\"true\") +    ggtitle(\"Global survival stacking example (censoring time distribution)\")  p"},{"path":"https://cwolock.github.io/survML/index.html","id":"local-survival-stacking","dir":"","previous_headings":"","what":"Local survival stacking","title":"Tools for Flexible Survival Analysis Using Machine Learning","text":"discrete time--event variables, hazard function single time conditional probability whose estimation can framed binary regression problem: among experienced event time t, proportion experience outcome time? Local survival stacking assumes discrete survival process based estimating conditional event probability time user-specified grid. binary regressions estimated jointly “stacking” data sets corresponding times grid. idea dates back least work Polley van der Laan (2011) also recently described Craig et al. (2021).","code":""},{"path":"https://cwolock.github.io/survML/index.html","id":"example-1","dir":"","previous_headings":"Local survival stacking","what":"Example","title":"Tools for Flexible Survival Analysis Using Machine Learning","text":"","code":"fit <- stackL(time = time,               event = event,               X = X,               newX = X,               newtimes = seq(0, 15, .1),               direction = \"prospective\",               bin_size = 0.02,               time_basis = \"continuous\",               SL_control = list(SL.library = SL.library,                                 V = 5)) plot_dat <- data.frame(fitted = fit$S_T_preds[1,],                         true = S0(t =  seq(0, 15, .1), X[1,]))  p <- ggplot(data = plot_dat, mapping = aes(x = true, y = fitted)) +    geom_point() +    geom_abline(slope = 1, intercept = 0, color = \"red\") +    theme_bw() +    ylab(\"fitted\") +   xlab(\"true\") +    ggtitle(\"Local survival stacking example\")  p"},{"path":"https://cwolock.github.io/survML/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"Tools for Flexible Survival Analysis Using Machine Learning","text":"details global survival stacking, please see following paper: Charles J. Wolock, Peter B. Gilbert, Noah Simon Marco Carone. “framework leveraging machine learning tools estimate personalized survival curves.” Journal Computational Graphical Statistics (2024). Local survival stacking described : Eric C. Polley Mark J. van der Laan. “Super Learning Right-Censored Data” Targeted Learning (2011). Erin Craig, Chenyang Zhong, Robert Tibshirani. “Survival stacking: casting survival analysis classification problem.” arXiv:2107.13480.","code":""},{"path":"https://cwolock.github.io/survML/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Tools for Flexible Survival Analysis Using Machine Learning","text":"using survML package, please cite following:","code":"@article{wolock2024,         title={A framework for leveraging machine learning tools to estimate personalized survival curves},         author={Wolock, Charles J and Gilbert, Peter B and Simon, Noah and Carone, Marco},         journal={Journal of Computational and Graphical Statistics},         year={2024},         publisher={Taylor \\& Francis},         doi={10.1080/10618600.2024.2304070} }"},{"path":"https://cwolock.github.io/survML/reference/currstatCIR.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate a survival function under current status sampling — currstatCIR","title":"Estimate a survival function under current status sampling — currstatCIR","text":"Estimate survival function current status sampling","code":""},{"path":"https://cwolock.github.io/survML/reference/currstatCIR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate a survival function under current status sampling — currstatCIR","text":"","code":"currstatCIR(   time,   event,   W,   direction = \"increasing\",   SL_control = list(SL.library = c(\"SL.mean\"), V = 5, method = \"method.NNLS\"),   HAL_control = list(n_bins = c(5, 10), grid_type = c(\"equal_range\", \"equal_mass\"), V =     5),   deriv_method = \"m-spline\",   missing_method = \"extended\",   eval_region,   n_eval_pts = 101 )"},{"path":"https://cwolock.github.io/survML/reference/stackG.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate a conditional survival function using global survival stacking — stackG","title":"Estimate a conditional survival function using global survival stacking — stackG","text":"Estimate conditional survival function using global survival stacking","code":""},{"path":"https://cwolock.github.io/survML/reference/stackG.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate a conditional survival function using global survival stacking — stackG","text":"","code":"stackG(   time,   event = rep(1, length(time)),   entry = NULL,   X,   newX = NULL,   newtimes = NULL,   direction = \"prospective\",   time_grid_fit = NULL,   bin_size = NULL,   time_basis,   time_grid_approx = sort(unique(time)),   surv_form = \"PI\",   learner = \"SuperLearner\",   SL_control = list(SL.library = c(\"SL.mean\"), V = 10, method = \"method.NNLS\", stratifyCV     = FALSE),   tau = NULL )"},{"path":"https://cwolock.github.io/survML/reference/stackG.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate a conditional survival function using global survival stacking — stackG","text":"time n x 1 numeric vector observed follow-times censoring, minimum event censoring times. event n x 1 numeric vector status indicators whether event observed. Defaults vector 1s, .e. censoring. entry Study entry variable, applicable. Defaults NULL, indicating truncation. X n x p data.frame observed covariate values train estimator. newX m x p data.frame new observed covariate values obtain m predictions estimated algorithm. Must names structure X. newtimes k x 1 numeric vector times obtain k predicted conditional survivals. direction Whether data come prospective retrospective study. determines whether data treated subject left truncation right censoring (\"prospective\") right truncation alone (\"retrospective\"). time_grid_fit Named list numeric vectors times times discretize estimation cumulative probability functions. alternative bin_size allows specially tailored time grids rather simply using quantile bin size. list consists vectors named F_Y_1_grid, F_Y_0_grid, G_W_1_grid, G_W_0_grid. denote, respectively, grids used estimate conditional CDF time variable among uncensored censored observations, grids used estimate conditional distribution entry variable among uncensored censored observations. bin_size Size time bin discretize estimation cumulative probability functions. Can number 0 1, indicating size quantile grid (e.g. 0.1 estimates cumulative probability functions grid based deciles observed times). NULL, creates grid observed times. time_basis treat time training binary classifier. Options \"continuous\" \"dummy\", meaning indicator variable included time time grid. time_grid_approx Numeric vector times approximate product integral cumulative hazard interval. Defaults times argument. surv_form Mapping hazard estimate survival estimate. Can either \"PI\" (product integral mapping) \"exp\" (exponentiated cumulative hazard estimate). learner binary regression algorithm use. Currently, SuperLearner supported, learners added. See algorithm-specific arguments. SL_control Named list parameters controlling Super Learner fitting process. parameters passed directly SuperLearner function. Parameters include SL.library (library algorithms include binary classification Super Learner), V (Number cross validation folds train Super Learner classifier, defaults 10), method (Method estimating coefficients Super Learner, defaults \"method.NNLS\"), stratifyCV (logical indicating whether stratify outcome SuperLearner's cross-validation scheme), obsWeights (observation weights, passed directly prediction algorithms SuperLearner). tau maximum time interest study, used retrospective conditional survival estimation. Rather dealing right truncation separately left truncation, simpler estimate survival function tau - time. Defaults NULL, case maximum study entry time chosen reference point.","code":""},{"path":"https://cwolock.github.io/survML/reference/stackG.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate a conditional survival function using global survival stacking — stackG","text":"named list class stackG, following components: S_T_preds m x k matrix estimated event time survival probabilities m covariate vector values k times provided user newX newtimes, respectively. S_C_preds m x k matrix estimated censoring time survival probabilities m covariate vector values k times provided user newX newtimes, respectively. time_grid_approx approximation grid product integral cumulative hazard integral, (user-specified). direction Whether data come prospective retrospective study (user-specified). tau maximum time interest study, used retrospective conditional survival estimation (user-specified). surv_form Exponential product-integral form (user-specified). time_basis Whether time included regression continuous dummy (user-specified). SL_control Named list parameters controlling Super Learner fitting process (user-specified). fits named list fitted regression objects corresponding constituent regressions needed global survival stacking. Includes P_Delta (probability event given covariates), F_Y_1 (conditional cdf follow-times given covariates among uncensored), F_Y_0 (conditional cdf follow-times given covariates among censored), G_W_1 (conditional distribution entry times given covariates follow-time among uncensored), G_W_0 (conditional distribution entry times given covariates follow-time among uncensored). objects includes estimated coefficients SuperLearner fit, well time grid used create stacked dataset (applicable).","code":""},{"path":"https://cwolock.github.io/survML/reference/stackG.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Estimate a conditional survival function using global survival stacking — stackG","text":"Wolock C.J., Gilbert P.B., Simon N., Carone, M. (2022). \"framework leveraging machine learning tools estimate personalized survival curves.\"","code":""},{"path":"https://cwolock.github.io/survML/reference/stackG.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate a conditional survival function using global survival stacking — stackG","text":"","code":"# This is a small simulation example set.seed(123) n <- 500 X <- data.frame(X1 = rnorm(n), X2 = rbinom(n, size = 1, prob = 0.5))  S0 <- function(t, x){   pexp(t, rate = exp(-2 + x[,1] - x[,2] + .5 * x[,1] * x[,2]), lower.tail = FALSE) } T <- rexp(n, rate = exp(-2 + X[,1] - X[,2] + .5 *  X[,1] * X[,2]))  G0 <- function(t, x) {   as.numeric(t < 15) *.9*pexp(t,                               rate = exp(-2 -.5*x[,1]-.25*x[,2]+.5*x[,1]*x[,2]),                               lower.tail=FALSE) } C <- rexp(n, exp(-2 -.5 * X[,1] - .25 * X[,2] + .5 * X[,1] * X[,2])) C[C > 15] <- 15  entry <- runif(n, 0, 15)  time <- pmin(T, C) event <- as.numeric(T <= C)  sampled <- which(time >= entry) X <- X[sampled,] time <- time[sampled] event <- event[sampled] entry <- entry[sampled]  # Note that this a very small Super Learner library, for computational purposes. SL.library <- c(\"SL.mean\", \"SL.glm\")  fit <- stackG(time = time,               event = event,               entry = entry,               X = X,               newX = X,               newtimes = seq(0, 15, .1),               direction = \"prospective\",               bin_size = 0.1,               time_basis = \"continuous\",               time_grid_approx = sort(unique(time)),               surv_form = \"exp\",               learner = \"SuperLearner\",               SL_control = list(SL.library = SL.library,                                 V = 5))  plot(fit$S_T_preds[1,], S0(t =  seq(0, 15, .1), X[1,])) abline(0,1,col='red')"},{"path":"https://cwolock.github.io/survML/reference/stackL.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate a conditional survival function via local survival stacking — stackL","title":"Estimate a conditional survival function via local survival stacking — stackL","text":"Estimate conditional survival function via local survival stacking","code":""},{"path":"https://cwolock.github.io/survML/reference/stackL.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate a conditional survival function via local survival stacking — stackL","text":"","code":"stackL(   time,   event = rep(1, length(time)),   entry = NULL,   X,   newX,   newtimes,   direction = \"prospective\",   bin_size = NULL,   time_basis = \"continuous\",   learner = \"SuperLearner\",   SL_control = list(SL.library = c(\"SL.mean\"), V = 10, method = \"method.NNLS\", stratifyCV     = FALSE),   tau = NULL )"},{"path":"https://cwolock.github.io/survML/reference/stackL.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate a conditional survival function via local survival stacking — stackL","text":"time n x 1 numeric vector observed follow-times censoring, minimum event censoring times. event n x 1 numeric vector status indicators whether event observed. Defaults vector 1s, .e. censoring. entry Study entry variable, applicable. Defaults NULL, indicating truncation. X n x p data.frame observed covariate values train estimator. newX m x p data.frame new observed covariate values obtain m predictions estimated algorithm. Must names structure X. newtimes k x 1 numeric vector times obtain k predicted conditional survivals. direction Whether data come prospective retrospective study. determines whether data treated subject left truncation right censoring (\"prospective\") right truncation alone (\"retrospective\"). bin_size Size bins discretization time. value 0 1 indicating size observed event time quantiles grid times (e.g. 0.02 creates grid 50 times evenly spaced quantile scaled). NULL, defaults every observed event time. time_basis treat time training binary classifier. Options \"continuous\" \"dummy\", meaning indicator variable included time time grid. learner binary regression algorithm use. Currently, SuperLearner supported, learners added. See algorithm-specific arguments. SL_control Named list parameters controlling Super Learner fitting process. parameters passed directly SuperLearner function. Parameters include SL.library (library algorithms include binary classification Super Learner), V (Number cross validation folds train Super Learner classifier, defaults 10), method (Method estimating coefficients Super Learner, defaults \"method.NNLS\"), stratifyCV (logical indicating whether stratify outcome SuperLearner's cross-validation scheme), obsWeights (observation weights, passed directly prediction algorithms SuperLearner). tau maximum time interest study, used retrospective conditional survival estimation. Rather dealing right truncation separately left truncation, simpler estimate survival function tau - time. Defaults NULL, case maximum study entry time chosen reference point.","code":""},{"path":"https://cwolock.github.io/survML/reference/stackL.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate a conditional survival function via local survival stacking — stackL","text":"named list class stackL. S_T_preds m x k matrix estimated event time survival probabilities m covariate vector values k times provided user newX newtimes, respectively. fit Super Learner fit binary classification stacked dataset.","code":""},{"path":"https://cwolock.github.io/survML/reference/stackL.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Estimate a conditional survival function via local survival stacking — stackL","text":"Polley E.C. van der Laan M.J. (2011). \"Super Learning Right-Censored Data\" Targeted Learning. Craig E., Zhong C., Tibshirani R. (2021). \"Survival stacking: casting survival analysis classification problem.\"","code":""},{"path":"https://cwolock.github.io/survML/reference/stackL.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate a conditional survival function via local survival stacking — stackL","text":"","code":"# This is a small simulation example set.seed(123) n <- 500 X <- data.frame(X1 = rnorm(n), X2 = rbinom(n, size = 1, prob = 0.5))  S0 <- function(t, x){   pexp(t, rate = exp(-2 + x[,1] - x[,2] + .5 * x[,1] * x[,2]), lower.tail = FALSE) } T <- rexp(n, rate = exp(-2 + X[,1] - X[,2] + .5 *  X[,1] * X[,2]))  G0 <- function(t, x) {   as.numeric(t < 15) *.9*pexp(t,                               rate = exp(-2 -.5*x[,1]-.25*x[,2]+.5*x[,1]*x[,2]),                               lower.tail=FALSE) } C <- rexp(n, exp(-2 -.5 * X[,1] - .25 * X[,2] + .5 * X[,1] * X[,2])) C[C > 15] <- 15  entry <- runif(n, 0, 15)  time <- pmin(T, C) event <- as.numeric(T <= C)  sampled <- which(time >= entry) X <- X[sampled,] time <- time[sampled] event <- event[sampled] entry <- entry[sampled]  # Note that this a very small Super Learner library, for computational purposes. SL.library <- c(\"SL.mean\", \"SL.glm\")  fit <- stackL(time = time,                event = event,                entry = entry,                X = X,                newX = X,                newtimes = seq(0, 15, .1),                direction = \"prospective\",                bin_size = 0.1,                time_basis = \"continuous\",                SL_control = list(SL.library = SL.library,                                  V = 5))  plot(fit$S_T_preds[1,], S0(t =  seq(0, 15, .1), X[1,])) abline(0,1,col='red')"},{"path":"https://cwolock.github.io/survML/reference/survML-package.html","id":null,"dir":"Reference","previous_headings":"","what":"survML: Tools for Flexible Survival Analysis Using Machine Learning — survML-package","title":"survML: Tools for Flexible Survival Analysis Using Machine Learning — survML-package","text":"Statistical methods analyzing time--event data using machine learning. Implements survival stacking conditional survival estimation isotonic regression methods current status data. See Wolock CJ, Gilbert PB, Simon N, Carone M (2024) doi:10.1080/10618600.2024.2304070 .","code":""},{"path":[]},{"path":"https://cwolock.github.io/survML/reference/survML-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"survML: Tools for Flexible Survival Analysis Using Machine Learning — survML-package","text":"Maintainer: Charles Wolock cwolock@gmail.com (ORCID) [copyright holder] contributors: Avi Kenny avi.kenny@gmail.com (ORCID) [contributor]","code":""},{"path":"https://cwolock.github.io/survML/reference/vim_AUC.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate AUC VIM — vim_AUC","title":"Estimate AUC VIM — vim_AUC","text":"Estimate AUC VIM","code":""},{"path":"https://cwolock.github.io/survML/reference/vim_AUC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate AUC VIM — vim_AUC","text":"","code":"vim_AUC(   time,   event,   approx_times,   landmark_times,   f_hat,   fs_hat,   S_hat,   G_hat,   folds,   sample_split,   ss_folds,   robust = TRUE,   scale_est = FALSE )"},{"path":"https://cwolock.github.io/survML/reference/vim_AUC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate AUC VIM — vim_AUC","text":"time n x 1 numeric vector observed follow-times censoring, minimum event censoring times. event n x 1 numeric vector status indicators whether event observed. Defaults vector 1s, .e. censoring. approx_times Numeric vector length J1 giving times approximate integrals. landmark_times Numeric vector length J2 giving times estimate AUC f_hat Full oracle predictions (n x J1 matrix) fs_hat Residual oracle predictions (n x J1 matrix) S_hat Estimates conditional event time survival function (n x J2 matrix) G_hat Estimate conditional censoring time survival function (n x J2 matrix) folds Numeric vector length n giving cross-fitting folds sample_split Logical indicating whether sample split ss_folds Numeric vector length n giving sample-splitting folds robust Logical, whether use doubly-robust debiasing approach. option meant illustration purposes --- left TRUE. scale_est Logical, whether force VIM estimate nonnegative","code":""},{"path":"https://cwolock.github.io/survML/reference/vim_AUC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate AUC VIM — vim_AUC","text":"data frame giving results","code":""},{"path":"https://cwolock.github.io/survML/reference/vim_accuracy.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate classification accuracy VIM — vim_accuracy","title":"Estimate classification accuracy VIM — vim_accuracy","text":"Estimate classification accuracy VIM","code":""},{"path":"https://cwolock.github.io/survML/reference/vim_accuracy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate classification accuracy VIM — vim_accuracy","text":"","code":"vim_accuracy(   time,   event,   approx_times,   landmark_times,   f_hat,   fs_hat,   S_hat,   G_hat,   folds,   sample_split,   ss_folds,   scale_est = FALSE )"},{"path":"https://cwolock.github.io/survML/reference/vim_accuracy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate classification accuracy VIM — vim_accuracy","text":"time n x 1 numeric vector observed follow-times censoring, minimum event censoring times. event n x 1 numeric vector status indicators whether event observed. Defaults vector 1s, .e. censoring. approx_times Numeric vector length J1 giving times approximate integrals. landmark_times Numeric vector length J2 giving times estimate accuracy f_hat Full oracle predictions (n x J1 matrix) fs_hat Residual oracle predictions (n x J1 matrix) S_hat Estimates conditional event time survival function (n x J2 matrix) G_hat Estimate conditional censoring time survival function (n x J2 matrix) folds Numeric vector length n giving cross-fitting folds sample_split Logical indicating whether sample split ss_folds Numeric vector length n giving sample-splitting folds scale_est Logical, whether force VIM estimate nonnegative","code":""},{"path":"https://cwolock.github.io/survML/reference/vim_accuracy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate classification accuracy VIM — vim_accuracy","text":"data frame giving results","code":""},{"path":"https://cwolock.github.io/survML/reference/vim_brier.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate Brier score VIM — vim_brier","title":"Estimate Brier score VIM — vim_brier","text":"Estimate Brier score VIM","code":""},{"path":"https://cwolock.github.io/survML/reference/vim_brier.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate Brier score VIM — vim_brier","text":"","code":"vim_brier(   time,   event,   approx_times,   landmark_times,   f_hat,   fs_hat,   S_hat,   G_hat,   folds,   ss_folds,   sample_split,   scale_est = FALSE )"},{"path":"https://cwolock.github.io/survML/reference/vim_brier.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate Brier score VIM — vim_brier","text":"time n x 1 numeric vector observed follow-times censoring, minimum event censoring times. event n x 1 numeric vector status indicators whether event observed. Defaults vector 1s, .e. censoring. approx_times Numeric vector length J1 giving times approximate integrals. landmark_times Numeric vector length J2 giving times estimate Brier score f_hat Full oracle predictions (n x J1 matrix) fs_hat Residual oracle predictions (n x J1 matrix) S_hat Estimates conditional event time survival function (n x J2 matrix) G_hat Estimate conditional censoring time survival function (n x J2 matrix) folds Numeric vector length n giving cross-fitting folds ss_folds Numeric vector length n giving sample-splitting folds sample_split Logical indicating whether sample split scale_est Logical, whether force VIM estimate nonnegative","code":""},{"path":"https://cwolock.github.io/survML/reference/vim_brier.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate Brier score VIM — vim_brier","text":"data frame giving results","code":""},{"path":"https://cwolock.github.io/survML/reference/vim_cindex.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate concordance index VIM — vim_cindex","title":"Estimate concordance index VIM — vim_cindex","text":"Estimate concordance index VIM","code":""},{"path":"https://cwolock.github.io/survML/reference/vim_cindex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate concordance index VIM — vim_cindex","text":"","code":"vim_cindex(   time,   event,   approx_times,   tau,   f_hat,   fs_hat,   S_hat,   G_hat,   folds,   sample_split,   ss_folds,   scale_est = FALSE )"},{"path":"https://cwolock.github.io/survML/reference/vim_cindex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate concordance index VIM — vim_cindex","text":"time n x 1 numeric vector observed follow-times censoring, minimum event censoring times. event n x 1 numeric vector status indicators whether event observed. Defaults vector 1s, .e. censoring. approx_times Numeric vector length J1 giving times approximate integrals. tau restriction time f_hat Full oracle predictions (n x J1 matrix) fs_hat Residual oracle predictions (n x J1 matrix) S_hat Estimates conditional event time survival function (n x J2 matrix) G_hat Estimate conditional censoring time survival function (n x J2 matrix) folds Numeric vector length n giving cross-fitting folds sample_split Logical indicating whether sample split ss_folds Numeric vector length n giving sample-splitting folds scale_est Logical, whether force VIM estimate nonnegative","code":""},{"path":"https://cwolock.github.io/survML/reference/vim_cindex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate concordance index VIM — vim_cindex","text":"data frame giving results","code":""},{"path":"https://cwolock.github.io/survML/reference/vim_rmst_mse.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate restricted prediction time MSE VIM — vim_rmst_mse","title":"Estimate restricted prediction time MSE VIM — vim_rmst_mse","text":"Estimate restricted prediction time MSE VIM","code":""},{"path":"https://cwolock.github.io/survML/reference/vim_rmst_mse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate restricted prediction time MSE VIM — vim_rmst_mse","text":"","code":"vim_rmst_mse(   time,   event,   approx_times,   tau,   f_hat,   fs_hat,   S_hat,   G_hat,   folds,   sample_split,   ss_folds,   scale_est = FALSE )"},{"path":"https://cwolock.github.io/survML/reference/vim_rmst_mse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate restricted prediction time MSE VIM — vim_rmst_mse","text":"time n x 1 numeric vector observed follow-times censoring, minimum event censoring times. event n x 1 numeric vector status indicators whether event observed. Defaults vector 1s, .e. censoring. approx_times Numeric vector length J1 giving times approximate integrals. tau restriction time f_hat Full oracle predictions (n x J1 matrix) fs_hat Residual oracle predictions (n x J1 matrix) S_hat Estimates conditional event time survival function (n x J2 matrix) G_hat Estimate conditional censoring time survival function (n x J2 matrix) folds Numeric vector length n giving cross-fitting folds sample_split Logical indicating whether sample split ss_folds Numeric vector length n giving sample-splitting folds scale_est Logical, whether force VIM estimate nonnegative","code":""},{"path":"https://cwolock.github.io/survML/reference/vim_rmst_mse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate restricted prediction time MSE VIM — vim_rmst_mse","text":"data frame giving results","code":""},{"path":[]},{"path":"https://cwolock.github.io/survML/news/index.html","id":"survml-110","dir":"Changelog","previous_headings":"","what":"survML 1.1.0","title":"survML 1.1.0","text":"CRAN release: 2024-03-17 Added gam SUGGESTS order allow SuperLearner package make corresponding change without breaking vignettes. Added time_grid_fit option main stackG function order allow flexibility choosing time grids. Minor bug fixes.","code":""},{"path":"https://cwolock.github.io/survML/news/index.html","id":"survml-100","dir":"Changelog","previous_headings":"","what":"survML 1.0.0","title":"survML 1.0.0","text":"CRAN release: 2023-07-08 Initial CRAN submission.","code":""}]
